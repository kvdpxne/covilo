import nu.studer.gradle.jooq.JooqEdition

plugins {
  id("java")

  alias(libraries.plugins.spring.boot)
  alias(libraries.plugins.spring.management)

  id("nu.studer.jooq") version "9.0"
}

description = ""
version = "0.1.0"

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

dependencies {
  implementation("org.springframework.boot:spring-boot-starter-jooq")

  implementation("org.springframework.boot:spring-boot-starter")
  testImplementation("org.springframework.boot:spring-boot-starter-test")

  annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

  implementation("org.springframework.boot:spring-boot-starter-web")

  implementation("org.springframework.boot:spring-boot-starter-security")
  testImplementation("org.springframework.security:spring-security-test")

  implementation("org.springframework.boot:spring-boot-starter-jdbc")
  runtimeOnly("org.postgresql:postgresql")

  compileOnly("org.projectlombok:lombok")
  annotationProcessor("org.projectlombok:lombok")

  implementation(libraries.openapi)
  jooqGenerator(project(":src-jooq-generator"))

  // Uncomment if using SQLite instead of PostgresSQL.
//  implementation(libraries.sqlite)
  jooqGenerator("org.postgresql:postgresql")

  // https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310
  implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1")


  // https://github.com/mapstruct/mapstruct
  implementation(libraries.mapstruct.core)
  annotationProcessor(libraries.mapstruct.processor)

  implementation(libraries.imageio.webp)

  // https://github.com/jwtk/jjwt
  implementation(libraries.jjwt.api)
  implementation(libraries.jjwt.jackson)

  runtimeOnly(libraries.bundles.jjwt.runtime)
  testRuntimeOnly("com.h2database:h2")
}

def targetJavaVersion = 22
java {
  def javaVersion = JavaVersion.toVersion(targetJavaVersion)

  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion

  if (JavaVersion.current() < javaVersion) {
    toolchain {
      languageVersion = JavaLanguageVersion.of(targetJavaVersion)
      vendor = JvmVendorSpec.ADOPTIUM
    }
  }
}

compileJava {

  options.compilerArgs += [
    // Enable preview features for the Java compiler.
    "--enable-preview",

    // Set the default component model for MapStruct to Spring, indicating
    // that Spring annotations will be used for dependency injection.
    "-Amapstruct.defaultComponentModel=spring",

    // Suppress generation of timestamp in MapStruct-generated classes.
    "-Amapstruct.suppressGeneratorTimestamp=true",

    // Suppress generation of version in MapStruct-generated classes.
    "-Amapstruct.suppressGeneratorVersionInfoComment=true",

    // Enable verbose mode for MapStruct, providing more detailed output
    // during code generation.
    "-Amapstruct.verbose=true",
  ]
}

processResources {
  def properties = ["version": version]

  inputs.properties(properties)
  filteringCharset("UTF-8")

  filesMatching("application.yml") {
    expand(properties)
  }
}

jooq {
  version = dependencyManagement.importedProperties["jooq.version"]
  edition = JooqEdition.OSS

  configurations {
    main {
      generationTool {
        logging = org.jooq.meta.jaxb.Logging.INFO
        jdbc {
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/covilo"
          user = "postgres"
          password = "postgres"
        }
        generator {
          def packageName = "me.kvdpxne.covilo.jooq"

          name = "org.jooq.codegen.DefaultGenerator"
          strategy {
            name = "${packageName}.DefaultGeneratorStrategyWithTableSuffix"
          }
          database {
            name = "org.jooq.meta.postgres.PostgresDatabase"
            inputSchema = "public"
          }
          target {
            packageName = "${packageName}.primary"
          }
        }
      }
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  if (10 <= targetJavaVersion || JavaVersion.current().isJava10Compatible()) {
    options.release.set(targetJavaVersion)
  }

  options.compilerArgs += ["--enable-preview"]
}

tasks.named("generateJooq").configure {
  // make jOOQ task participate in incremental builds (which is also a
  // prerequisite for build caching)
  allInputsDeclared = true
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()
  systemProperty("spring.profiles.active", "testing")
  jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec).configureEach {
  jvmArgs += '--enable-preview'
}