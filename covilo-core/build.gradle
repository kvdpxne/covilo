plugins {
  id("java")

  alias(libraries.plugins.spring.boot)
  alias(libraries.plugins.spring.management)
}

description = ""
version = "0.1.0"

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

dependencies {
  implementation("org.springframework.boot:spring-boot-starter")
  testImplementation("org.springframework.boot:spring-boot-starter-test")

  annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

  implementation("org.springframework.boot:spring-boot-starter-web")

  implementation("org.springframework.boot:spring-boot-starter-security")
  testImplementation("org.springframework.security:spring-security-test")

  implementation("org.springframework.boot:spring-boot-starter-jdbc")
  implementation("org.springframework.boot:spring-boot-starter-data-jpa")
  runtimeOnly("org.postgresql:postgresql")

  compileOnly("org.projectlombok:lombok")
  annotationProcessor("org.projectlombok:lombok")

  implementation(libraries.openapi)

  // https://github.com/mapstruct/mapstruct
  implementation(libraries.mapstruct.core)
  annotationProcessor(libraries.mapstruct.processor)

  implementation(libraries.imageio.webp)

  // https://github.com/jwtk/jjwt
  implementation(libraries.jjwt.api)
  runtimeOnly(libraries.bundles.jjwt.runtime)
}

def targetJavaVersion = 17
java {
  def javaVersion = JavaVersion.toVersion(targetJavaVersion)

  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion

  if (JavaVersion.current() < javaVersion) {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
  }
}

processResources {
  def properties = ["version": rootProject.version]

  inputs.properties(properties)
  filteringCharset("UTF-8")

  filesMatching("application.yml") {
    expand(properties)
  }
}

tasks.withType(JavaCompile).configureEach {
  if (10 <= targetJavaVersion || JavaVersion.current().isJava10Compatible()) {
    options.release.set(targetJavaVersion)
  }
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()
}